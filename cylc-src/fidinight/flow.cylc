#!Jinja2

{% set NUM_CELLS = "128" %}
{% set NUM_STEPS = "2" %}
{% set NUM_PROCS = "4" %}
{% set NUM_NODES = "2" %}
{% set PARTITION = "genoa" %}
{% set TIME = "00:10:00" %}
{% set MEM = "5g" %}
{% set HPC3 = false %}

[scheduling]
    initial cycle point = previous(T02)
    [[graph]]
        P1D = """
            run
            run[-P1D] => run
            @wall_clock => run
        """

[runtime]
   [[run]]
      script = """
        {% if HPC3 %}
          module purge
          module load intel
          export CXX=icc
        {% endif %}

        # build
        git clone https://github.com/pletzer/fidibench.git
        cd fidibench
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
        cd upwind/cxx
        make -j 4
        echo "build in $(pwd) is done"

        # run 
        numcells={{NUM_CELLS}}
        numsteps={{NUM_STEPS}}
        numprocs={{NUM_PROCS}}
        numnodes={{NUM_NODES}}
        partition={{PARTITION}}
        time={{TIME}}
        mem={{MEM}}
        {% if HPC3 %}
          cmd="srun --time=$time --mem=$mem -p $partition -n $numprocs -N $numnodes ./upwindMpiCxx -numCells $numcells -numSteps $numsteps"
        {% else %}
          cmd="mpiexec -n $numprocs ./upwindMpiCxx -numCells $numcells -numSteps $numsteps"
        {% endif %}
        echo "Will execute $cmd"
        $cmd >& log.txt
        echo "Done."
        cat log.txt

        # test
        checksum=$(grep "Check sum" log.txt | awk -F : '{print $2}' | tr -d ' ')
        if [ "$checksum" != "1" ]; then
          echo "Checksum test failed! checksum = >${checksum}<"
          exit 1
        fi

        # time
        tmin=$(grep "times" log.txt | awk -F : '{print $2}' | awk -F / '{print $1}' | tr -d ' ')
        tmax=$(grep "times" log.txt | awk -F : '{print $2}' | awk -F / '{print $2}' | tr -d ' ')
        tavg=$(grep "times" log.txt | awk -F : '{print $2}' | awk -F / '{print $3}' | tr -d ' ')

        # clean up
        cd ../../../..
        rm -rf fidibench

        # store
        cd $CYLC_WORKFLOW_SHARE_DIR
        if [ ! -f timings.csv ]; then
          # create the failed
          echo "date,partition,numProcs,numNodes,numCells,numSteps,tmin,tmax,tavg" > timings.csv
        fi
        # extract the times
        echo "$(date),$partition,$numprocs,$numnodes,$numcells,$numsteps,$tmin,$tmax,$tavg" >> timings.csv
        
      """
